/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: songzh
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Homebridge-Broker"
#HINT "This program is message broker"
#PRINT_TO_TRACE
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#CATEGORY "46" "cresKit" // Custom

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)

  Note:  Crestron does not recommend the use of the #INCLUDEPATH directive in SIMPL+ modules
  that are to be used in Crestron Studio.
*******************************************************************************************/


/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_,_SKIP_;
STRING_INPUT Socket_Tx[65000];
DIGITAL_OUTPUT _SKIP_,_SKIP_;
STRING_OUTPUT Socket_Rx;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

TCP_SERVER TCPServer[65000];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

INTEGER_PARAMETER Port;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER IPAddress[16];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES IPAddress
	propValidUnits = unitString;
	propDefaultValue = "0.0.0.0";
	propShortDescription = "IP Address";
	#BEGIN_PROP_FULL_DESCRIPTION "TCP server's IP Address to allow connections from" #END_PROP_FULL_DESCRIPTION
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Port
	propValidUnits = unitDecimal;
	propDefaultValue = 9050d;
	propShortDescription = "port";
	#BEGIN_PROP_FULL_DESCRIPTION "TCP's server port to connect to" #END_PROP_FULL_DESCRIPTION
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

SIGNED_INTEGER doServerConnected;
STRING InternalRxBuffer[65000];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function StartServer()
{
    SIGNED_INTEGER Status;

	Status = SocketServerStartListen(TCPServer, IPAddress, Port);

	if (status < 0) {
		Print("Error listening to %s on port %u (status: %d)\n", IPAddress, Port, Status);
	} else {
        Print("Server started to %s on port %u (status: %d)\n", IPAddress, Port, status);
	}
}

Function SocketTx(STRING ServerTx)
{
	SIGNED_INTEGER Status;

    Status = SocketSend(TCPServer, ServerTx);

    if (Status < 0) {
		Print("Error Sending to TCPServer: %d\n", Status);
    } else {
		// Print("Sent %s\n", ServerTx);
	}
}

Function SocketRx()
{
	STRING Temp$[65000];
	// Print("InternalRxBuffer: %s\n", InternalRxBuffer);
    While (Len(InternalRxBuffer) > 1)
	{
		Temp$ = Remove("||",InternalRxBuffer);
    	Temp$ = Left(Temp$, (Len(Temp$)-2));
		Socket_Rx = Temp$;
	}
}

CHANGE Socket_Tx{
    STRING Temp$[65000];
    Temp$ = Socket_Tx;
    SocketTx(Temp$);
}

SOCKETCONNECT TCPServer
{
    doServerConnected = 1;
    Print("OnConnect: input buffer size is: %d\n", Len(TCPServer.SocketRxBuf));
}



SOCKETDISCONNECT TCPServer
{
    doServerConnected = 0;
}



SOCKETRECEIVE TCPServer
{
    InternalRxBuffer = InternalRxBuffer + TCPServer.SocketRxBuf;
	ClearBuffer(TCPServer.SocketRxBuf);
	SocketRx();
}



SOCKETSTATUS TCPServer
{
    SIGNED_INTEGER Status;
    Status = SocketGetStatus();
    Print("The SocketGetStatus returns:       %d\n", Status);
    Print("The TCPServer.SocketStatus returns: %d\n", TCPServer.SocketStatus);
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.

	//Initialize the TCP server
	StartServer();
    Print("Program started!!!.\n");
}
