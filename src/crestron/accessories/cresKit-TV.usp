/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: songzh
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Homebridge-Television"
#HINT "This module is the Television part of the homebridge"
#PRINT_TO_TRACE
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#CATEGORY "46" "cresKit" // Custom

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)

  Note:  Crestron does not recommend the use of the #INCLUDEPATH directive in SIMPL+ modules
  that are to be used in Crestron Studio.
*******************************************************************************************/
#INCLUDEPATH "C:\Program Files (x86)\Crestron\Simpl\Usrsplus\clz"
#USER_SIMPLSHARP_LIBRARY "crestron-homebridge"



/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT Television_IsOn[1];
DIGITAL_INPUT _SKIP_,_SKIP_;
DIGITAL_INPUT Television_IsMute[1];
DIGITAL_INPUT _SKIP_;
ANALOG_INPUT Television_GetVolume[1];
ANALOG_INPUT _SKIP_,_SKIP_;
STRING_INPUT Socket_Rx$[1][65000];
STRING_INPUT _SKIP_;


DIGITAL_OUTPUT Television_On[1];
DIGITAL_OUTPUT Television_Off[1];
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT Television_Mute[1];
DIGITAL_OUTPUT _SKIP_;
ANALOG_OUTPUT Television_SetVolume[1];
ANALOG_OUTPUT Television_SetRemoteKey[1];
ANALOG_OUTPUT _SKIP_;
STRING_OUTPUT Socket_Tx$[1];
STRING_OUTPUT _SKIP_;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ResponseMsg(Message msg)
{
	STRING ServerTx[500];
	msg.MessageType = "Response";
	Socket_Tx$[1] = MessageBroker.SerializeMessage(msg) + "||";
	
}

Function EventMsg(Message msg)
{
	STRING ServerTx[500];
	Socket_Tx$[1] = MessageBroker.SerializeMessage(msg) + "||";
}

EventHandler TelevisionHandler(Message msg)
{
	INTEGER IsOn;
	INTEGER Value;
	IsOn = Television_IsOn[msg.DeviceId];

	if (msg.MessageType = "Request" && msg.Operation = "Get" && msg.Property = "Power")
	{
		print("%s",msg.DeviceType);
		Value = IsOn;
		msg.Value = Value;
		ResponseMsg(msg);
	}

	if (msg.MessageType = "Request" && msg.Operation = "Get" && msg.Property = "Mute")
	{
		Value = Television_IsMute[msg.DeviceId];
		msg.Value = Value;
		ResponseMsg(msg);
	}

	if (msg.MessageType = "Request" && msg.Operation = "Get" && msg.Property = "Volume")
	{
		Value = Television_GetVolume[msg.DeviceId];
		msg.Value = Value;
		ResponseMsg(msg);
	}

	if (msg.MessageType = "Request" && msg.Operation = "Set" && msg.Property = "Power")
	{
		Value = msg.Value;

		if (Value = 1 && IsOn = 0)
		{
			PULSE(1, Television_On[msg.DeviceId]);
		}
		else if (Value = 0 && IsOn = 1)
		{
			PULSE(1, Television_Off[msg.DeviceId]);
		}
		else
		{
			ResponseMsg(msg);
		}
	}

	if (msg.MessageType = "Request" && msg.Operation = "Set" && msg.Property = "Mute")
	{
		Value = msg.Value;

		if (Value = 1)
		{
			Television_Mute[msg.DeviceId] = 1;
		}
		else if (Value = 0 )
		{
			Television_Mute[msg.DeviceId] = 0;
		}
		else
		{
			ResponseMsg(msg);
		}
	}

	if (msg.MessageType = "Request" && msg.Operation = "Set" && msg.Property = "Volume")
	{
		Value = msg.Value;
		ResponseMsg(msg);
		
		Television_SetVolume[msg.DeviceId] = Value;
		
	}

	if (msg.MessageType = "Request" && msg.Operation = "Set" && msg.Property = "RemoteKey")
	{
		Value = msg.Value;
		ResponseMsg(msg);
		
		Television_SetRemoteKey[msg.DeviceId] = Value;
		
	}

	if (msg.MessageType = "Event" && msg.Operation = "Set" && msg.Property = "Power")
	{
			EventMsg(msg);
	}

	if (msg.MessageType = "Event" && msg.Operation = "Set" && msg.Property = "Mute")
	{
			EventMsg(msg);
	}

	if (msg.MessageType = "Event" && msg.Operation = "Set" && msg.Property = "Volume")
	{
			EventMsg(msg);
	}

}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE Television_GetVolume
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "Television";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "Volume";
	msg.Value = Television_GetVolume[msg.DeviceId];
	MessageBroker.TriggerTelevisionMessage(msg);
	
}

CHANGE Television_IsMute
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "Television";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "Mute";
	msg.Value = Television_IsMute[msg.DeviceId];
	MessageBroker.TriggerTelevisionMessage(msg);
	
}

CHANGE Television_IsOn
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "Television";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "Power";
	msg.Value = Television_IsOn[msg.DeviceId];
	MessageBroker.TriggerTelevisionMessage(msg);
	
}

CHANGE Socket_Rx$
{
    STRING Temp$[65000];
	STRING DeviceType[100];

	Temp$ = Socket_Rx$[1];
	DeviceType = MessageBroker.GetType(Temp$);
	if (DeviceType = "Television")
	{
		MessageBroker.ParseMessage(Temp$);
	}
	else{
		return;
	}

}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    RegisterEvent(MessageBroker, OnTelevisionMessage, TelevisionHandler);

    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
	
    Print("Program started!!!.\n");
}
