/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: songzh
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Homebridge-Light"
#HINT "This module is the light part of the homebridge,include light dim-light"
#PRINT_TO_TRACE
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#CATEGORY "46" "cresKit" // Custom

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)

  Note:  Crestron does not recommend the use of the #INCLUDEPATH directive in SIMPL+ modules
  that are to be used in Crestron Studio.
*******************************************************************************************/
#INCLUDEPATH "C:\Program Files (x86)\Crestron\Simpl\Usrsplus\clz"
#USER_SIMPLSHARP_LIBRARY "crestron-homebridge"



/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Light_IsOn[10];
DIGITAL_INPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;

ANALOG_INPUT DimLight_Level[10];
ANALOG_INPUT _SKIP_;
STRING_INPUT Socket_Rx$[1][65000];
STRING_INPUT _SKIP_;

DIGITAL_OUTPUT Light_On[10];
DIGITAL_OUTPUT Light_Off[10];
DIGITAL_OUTPUT _SKIP_;

ANALOG_OUTPUT DimLight_Set[10];
ANALOG_OUTPUT _SKIP_;
STRING_OUTPUT Socket_Tx$[1];
STRING_OUTPUT _SKIP_;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ResponseMsg(Message msg)
{
	STRING ServerTx[500];
	msg.MessageType = "Response";
	Socket_Tx$[1] = MessageBroker.SerializeMessage(msg) + "||";
	
}

Function EventMsg(Message msg)
{
	STRING ServerTx[500];
	Socket_Tx$[1] = MessageBroker.SerializeMessage(msg) + "||";
}

EventHandler LightSwitchMessageHandler(Message msg)
{
	INTEGER IsOn;
	INTEGER Value;
	IsOn = Light_IsOn[msg.DeviceId];

	if (msg.MessageType = "Request" && msg.Operation = "Get" && msg.Property = "Power")
	{
		Value = IsOn;
		msg.Value = Value;
		ResponseMsg(msg);
	}

	if (msg.MessageType = "Request" && msg.Operation = "Set" && msg.Property = "Power")
	{
		ResponseMsg(msg);
        Value = msg.Value;

		if (Value = 1 && IsOn = 0)
		{
			PULSE(1, Light_On[msg.DeviceId]);
		}
		else if (Value = 0 && IsOn = 1)
		{
			PULSE(1, Light_Off[msg.DeviceId]);
		}
		else
		{
			ResponseMsg(msg);
		}
	}

	if (msg.MessageType = "Event" && msg.Operation = "Set" && msg.Property = "Power")
	{
			EventMsg(msg);
	}
}

EventHandler LightDimmerMessageHandler(Message msg)
{
	INTEGER IsOn;
	INTEGER Level;
	INTEGER Value;
	Level = DimLight_Level[msg.DeviceId];

	if (msg.MessageType = "Request" && msg.Operation = "Get" && msg.Property = "Power")
	{
		if (Level = 0)
		{
			IsOn = 0;				
		} else 
		{
			IsOn = 1;
		}
		Value = IsOn;
		msg.Value = Value;
		ResponseMsg(msg);
	}

	if (msg.MessageType = "Request" && msg.Operation = "Get" && msg.Property = "Level")
	{
		Value = Level;
		msg.Value = Value;
		msg.MessageType = "Response";
		ResponseMsg(msg);
	}

	if (msg.MessageType = "Request" && msg.Operation = "Set" && msg.Property = "Power")
	{
		
        Value = msg.Value;

		if (Value = 1 && Level = 0)
		{
			DimLight_Set[msg.DeviceId] = 65535;
		}
		else if (Value = 0 && Level > 0)
		{
			DimLight_Set[msg.DeviceId] = 0;
		}
        else
        {
           ResponseMsg(msg); 
        }

	}

	if (msg.MessageType = "Request" && msg.Operation = "Set" && msg.Property = "Level")
	{
		ResponseMsg(msg);
        Value = msg.Value;
		DimLight_Set[msg.DeviceId] = Value;
    
	}

	if (msg.MessageType = "Event" && msg.Operation = "Set" && msg.Property = "Level")
	{
		EventMsg(msg);
	}
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE Light_IsOn
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	msg.MessageType = "Event";
	msg.DeviceType = "LightSwitch";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "Power";
	msg.Value = Light_IsOn[Id];
	MessageBroker.TriggerLightSwitchMessage(msg);
}

CHANGE DimLight_Level
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	msg.MessageType = "Event";
	msg.DeviceType = "LightDimmer";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "Level";
	msg.Value = DimLight_Level[Id];
	MessageBroker.TriggerLightDimmerMessage(msg);
}

CHANGE Socket_Rx$
{
    STRING Temp$[65000];
    STRING DeviceType[100];
	// Print("InternalRxBuffer: %s\n", Socket_Rx$[1]);
    //While (Len(Socket_Rx$[1]) > 1)
	//{
    Temp$ = Socket_Rx$[1];
    DeviceType = MessageBroker.GetType(Temp$);
    if (DeviceType = "LightDimmer" || DeviceType = "LightSwitch")
    {
        MessageBroker.ParseMessage(Temp$);
    }
    else{
        return;
    }
    
	//}

}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    RegisterEvent(MessageBroker, OnLightSwitchMessage, LightSwitchMessageHandler);
	RegisterEvent(MessageBroker, OnLightDimmerMessage, LightDimmerMessageHandler);

    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
	
    Print("Program started!!!.\n");
}
