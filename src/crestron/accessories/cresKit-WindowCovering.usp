/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: songzh
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Homebridge-WindowCovering"
#HINT "This module is the WindowCovering part of the homebridge"
#PRINT_TO_TRACE
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#CATEGORY "46" "cresKit" // Custom

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)

  Note:  Crestron does not recommend the use of the #INCLUDEPATH directive in SIMPL+ modules
  that are to be used in Crestron Studio.
*******************************************************************************************/
#INCLUDEPATH "C:\Program Files (x86)\Crestron\Simpl\Usrsplus\clz"
#USER_SIMPLSHARP_LIBRARY "crestron-homebridge"



/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
ANALOG_INPUT Get_CurrentPosition[5];
ANALOG_INPUT _SKIP_;
STRING_INPUT Socket_Rx$[1][65000];
STRING_INPUT _SKIP_;

ANALOG_OUTPUT Set_Position[5];
ANALOG_OUTPUT _SKIP_;
STRING_OUTPUT Socket_Tx$[1];
STRING_OUTPUT _SKIP_;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ResponseMsg(Message msg)
{
	STRING ServerTx[500];
	msg.MessageType = "Response";
	Socket_Tx$[1] = MessageBroker.SerializeMessage(msg) + "||";
	
}

Function EventMsg(Message msg)
{
	STRING ServerTx[500];
	Socket_Tx$[1] = MessageBroker.SerializeMessage(msg) + "||";
}

EventHandler WindowCoveringHandler(Message msg)
{
	INTEGER PositionValue;
	INTEGER Value;
	STRING ServerTx[500];
	
	
	if (msg.MessageType = "Request" && msg.Operation = "Get")
	{
		
		PositionValue = Get_CurrentPosition[msg.DeviceId];
		Value = PositionValue;
		msg.Value = Value;
		ResponseMsg(msg);
	}

	if (msg.MessageType = "Request" && msg.Operation = "Set" && msg.Property = "TargetPosition")
	{
		ResponseMsg(msg);
		
		Value = msg.Value;

		Set_Position[msg.DeviceId] = Value;

	}

	if (msg.MessageType = "Event" && msg.Operation = "Set" && msg.Property = "CurrentPosition")
	{
		EventMsg(msg);
	}

}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE Get_CurrentPosition
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "WindowCovering";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "CurrentPosition";
	msg.Value = Get_CurrentPosition[Id];
	MessageBroker.TriggerWindowCoveringMessage(msg);
	
}

CHANGE Socket_Rx$
{
    STRING Temp$[65000];
	STRING DeviceType[100];

	Temp$ = Socket_Rx$[1];
	DeviceType = MessageBroker.GetType(Temp$);
	if (DeviceType = "WindowCovering")
	{
		MessageBroker.ParseMessage(Temp$);
	}
	else{
		return;
	}

}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    RegisterEvent(MessageBroker, OnWindowCoveringMessage, WindowCoveringHandler);

    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
	
    Print("Program started!!!.\n");
}
