/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: songzh
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Homebridge-Sensor"
#HINT "This module is the sensor part of the homebridge,include MotionSensor,OccupancySensor,SmokeSensor,LeakeSensor,ContactSensor"
#PRINT_TO_TRACE
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#CATEGORY "46" "cresKit" // Custom

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)

  Note:  Crestron does not recommend the use of the #INCLUDEPATH directive in SIMPL+ modules
  that are to be used in Crestron Studio.
*******************************************************************************************/
#INCLUDEPATH "C:\Program Files (x86)\Crestron\Simpl\Usrsplus\clz"
#USER_SIMPLSHARP_LIBRARY "crestron-homebridge"


/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT MotionSensor_State[5];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT OccupancySensor_State[5];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT SmokeSensor_State[5];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT LeakSensor_State[5];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT ContactSensor_State[5];
DIGITAL_INPUT _SKIP_;
STRING_INPUT Socket_Rx$[1][65000];
STRING_INPUT _SKIP_;


STRING_OUTPUT Socket_Tx$[1];
STRING_OUTPUT _SKIP_;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function ResponseMsg(Message msg)
{
	STRING ServerTx[500];
	msg.MessageType = "Response";
	Socket_Tx$[1] = MessageBroker.SerializeMessage(msg) + "||";
	
}

Function EventMsg(Message msg)
{
	STRING ServerTx[500];
	Socket_Tx$[1] = MessageBroker.SerializeMessage(msg) + "||";
}



EventHandler SensorStateMessageHandler(Message msg)
{
	INTEGER IsDetected;
	INTEGER Value;

	if (msg.MessageType = "Request" && msg.Operation = "Get" && msg.Property = "State")
	{
		if (msg.DeviceType = "OccupancySensor")
		{
			IsDetected = OccupancySensor_State[msg.DeviceId];

		} else if (msg.DeviceType = "MotionSensor"){
			IsDetected = MotionSensor_State[msg.DeviceId];
		
		} else if (msg.DeviceType = "SmokeSensor"){
			IsDetected = SmokeSensor_State[msg.DeviceId];
		
		} else if (msg.DeviceType = "LeakSensor"){
			IsDetected = LeakSensor_State[msg.DeviceId];
		
		} else if (msg.DeviceType = "ContactSensor"){
			IsDetected = ContactSensor_State[msg.DeviceId];
		}
        
		Value = IsDetected;
		msg.Value = Value;
		ResponseMsg(msg);
	}


	if (msg.MessageType = "Event" && msg.Operation = "Set" && msg.Property = "State")
	{
		EventMsg(msg);
	}
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE MotionSensor_State
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "MotionSensor";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "State";
	msg.Value = MotionSensor_State[Id];
	MessageBroker.TriggerSensorStateMessage(msg);
	
}

CHANGE OccupancySensor_State
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "OccupancySensor";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "State";
	msg.Value = OccupancySensor_State[Id];
	MessageBroker.TriggerSensorStateMessage(msg);	
}

CHANGE LeakSensor_State
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "LeakSensor";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "State";
	msg.Value = LeakSensor_State[Id];
	MessageBroker.TriggerSensorStateMessage(msg);	
}

CHANGE SmokeSensor_State
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "SmokeSensor";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "State";
	msg.Value = SmokeSensor_State[Id];
	MessageBroker.TriggerSensorStateMessage(msg);	
}

CHANGE ContactSensor_State
{
	Message msg;
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	
	msg.MessageType = "Event";
	msg.DeviceType = "ContactSensor";
	msg.DeviceId = Id;
	msg.Operation = "Set";
	msg.Property = "State";
	msg.Value = ContactSensor_State[Id];
	MessageBroker.TriggerSensorStateMessage(msg);	
}

CHANGE Socket_Rx$
{
    STRING Temp$[65000];
    STRING DeviceType[100];
	// Print("InternalRxBuffer: %s\n", Socket_Rx$[1]);
    //While (Len(Socket_Rx$[1]) > 1)
	//{
    Temp$ = Socket_Rx$[1];
    
    DeviceType = MessageBroker.GetType(Temp$);
	DeviceType = Right(DeviceType,5);
    if (DeviceType = "Sensor")
    {
        MessageBroker.ParseMessage(Temp$);
    }
    else{
        return;
    }

}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    RegisterEvent(MessageBroker, OnSensorStateMessage, SensorStateMessageHandler);

    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
	
    Print("Program started!!!.\n");
}
